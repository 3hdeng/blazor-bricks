@page "/"
<div class="inside-page">
    <header>
        <img src="img/Title.png" />
    </header>
    <div class="HolyGrail-body">
        <nav>
            <div class="stats">
                <StatsInfo Label="SCORE"
                           Value="@(BlazorBricks.Core.GameManager.Instance.CurrentBoard.Score)" />

                <StatsInfo Label="HI SCORE"
                           Value="@(BlazorBricks.Core.GameManager.Instance.CurrentBoard.HiScore)" />

                <StatsInfo Label="LINES"
                           Value="@(BlazorBricks.Core.GameManager.Instance.CurrentBoard.Lines)" />

                <StatsInfo Label="LEVEL"
                           Value="@(BlazorBricks.Core.GameManager.Instance.CurrentBoard.Level)" />
            </div>
        </nav>
        <main>

            @if (BlazorBricks.Core.GameManager.Instance.CurrentBoard.IsGameOver)
            {
                <div>
                    <div>
                        <button @onclick(StartTickLoop)>START NEW GAME</button>
                    </div>
                    <br />
                    <br />
                    <br />
                    <div>BLAZOR BRICKS</div>
                    <div>©2018 MARCELO RICARDO DE OLIVEIRA</div>
                    <br />
                    <br />
                    <div>
                        MADE FOR CODE PROJECT <br />
                        (<span><a target="_blank" href="http://www.codeproject.com">http://www.codeproject.com</a></span>)
                    </div>
                    <br />
                    <div>
                        <img src="img/Bob.png" class="bob" />
                    </div>
                </div>
            }
            else
            {
                <div class="board">
                    <BricksBoard Bricks="@boardViewModel.Bricks" />
                </div>
            }

        </main>
        <aside>
            @{
                var rows = boardViewModel.Next.Max(n => n.Row) + 1;
                var columns = boardViewModel.Next.Max(n => n.Col) + 1;
            }
            <div class="stats">
                <div class="statsLine next-container">
                    <div>NEXT</div>
                    <hr />
                    <div>
                        <div class="statsLine next-piece piece-rows-@rows piece-columns-@columns">
                            <BricksBoard Bricks="@boardViewModel.Next" />
                        </div>
                    </div>
                </div>
            </div>
        </aside>
    </div>
    <footer>
        <img class="wa-logo" src="/img/WebAssembly.svg" />
    </footer>
</div>
<div class="as-console-wrapper"><div class="as-console"></div></div>


<script>

    const assemblyName = 'BlazorBricks';
    const namespace = 'BlazorBricks';
    const typeName = 'OnKeyUp';
    const methodName = 'Handler';

    const onkeyupMethod = Blazor.platform.findMethod(
        assemblyName,
        namespace,
        typeName,
        methodName
    );

    document.onkeyup = function (evt) {
        evt = evt || window.event;
        const keyCode = Blazor.platform.toDotNetString(evt.keyCode.toString());
        Blazor.platform.callMethod(onkeyupMethod, null, [keyCode]);

    };

    function onKeyUp(element, evt) {
        const char = Blazor.platform.toDotNetString(evt.key)
        Blazor.platform.callMethod(onkeyupMethod, null, [char]);
    }
</script>
@functions {
bool isGameOver = true;
public BlazorBricks.Core.BoardViewModel boardViewModel;
protected override async Task OnInitAsync()
{
    OnKeyUp.Action = async value =>
    {
        ConsoleKey consoleKey = (ConsoleKey)Enum.Parse(typeof(ConsoleKey), value);

        switch (consoleKey)
        {
            case ConsoleKey.LeftArrow:
                BlazorBricks.Core.GameManager.Instance.Presenter.MoveLeft();
                break;
            case ConsoleKey.RightArrow:
                BlazorBricks.Core.GameManager.Instance.Presenter.MoveRight();
                break;
            case ConsoleKey.UpArrow:
                BlazorBricks.Core.GameManager.Instance.Presenter.Rotate90();
                break;
            case ConsoleKey.DownArrow:
                BlazorBricks.Core.GameManager.Instance.Presenter.MoveDown();
                break;
            default:
                break;
        }
        this.StateHasChanged();
    };

    boardViewModel = BlazorBricks.Core.GameManager.Instance.CurrentBoard;

    Object thisLock = new Object();
    BlazorBricks.Core.GameManager.Instance.Presenter.Updated
    += (obj, e) =>
    {
        lock (thisLock)
        {
            boardViewModel = BlazorBricks.Core.GameManager.Instance.CurrentBoard;
            this.StateHasChanged();
        };
    };
}

void InitializeBoard()
{
    BlazorBricks.Core.GameManager.Instance.Presenter.InitializeBoard();
    boardViewModel = BlazorBricks.Core.GameManager.Instance.CurrentBoard;

    isGameOver = BlazorBricks.Core.GameManager.Instance.CurrentBoard.IsGameOver;

    this.StateHasChanged();
}

public void StartTickLoop()
{
    InitializeBoard();
}
}
