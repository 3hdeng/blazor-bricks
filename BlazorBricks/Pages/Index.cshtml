@page "/"
        <div class="screen">
            <div class="centerPanel">
                <div class="board">
                    @foreach (var brick in boardViewModel.Bricks)
                    {
                        <span class="colorChip" style="background-color:@(brick.Color);"></span>
                    }
                </div>
                <div class="scorePanel">
                    <div>
                        Score
                    </div>
                    <div id="divScore" class="scoreText">000000</div>
                    <br />
                    <div>
                        HiScore
                    </div>
                    <div id="divHiScore" class="scoreText">000000</div>
                    <br />
                    <div>
                        Lines
                    </div>
                    <div id="divLines" class="scoreText">0</div>
                    <br />
                    <div>
                        Level
                    </div>
                    <div id="divLevel" class="scoreText">0</div>
                    <br />
                    <div>
                        Next
                    </div>
                    <div id="divNext" class="scoreText"></div>

                </div>
            </div>
            <div id="gamePaused">
                GAME PAUSED<br />
                Press SPACE to continue!
            </div>
        </div>
<div id="gameOver">
    GAME OVER<br />
    Press SPACE to restart!
</div>

<script>
    
    const assemblyName = 'BlazorBricks';
    const namespace = 'BlazorBricks';
    const typeName = 'OnKeyUp';
    const methodName = 'Handler';

    const onkeyupMethod = Blazor.platform.findMethod(
        assemblyName,
        namespace,
        typeName,
        methodName
    );

    document.onkeyup = function (evt) {
        evt = evt || window.event;
        const keyCode = Blazor.platform.toDotNetString(evt.keyCode.toString());
        Blazor.platform.callMethod(onkeyupMethod, null, [keyCode]);

    };

    function onKeyUp(element, evt) {
        const char = Blazor.platform.toDotNetString(evt.key)
        Blazor.platform.callMethod(onkeyupMethod, null, [char]);
    }
</script>
@functions {
    public BlazorBricks.Core.BoardViewModel boardViewModel;
    protected override async Task OnInitAsync()
    {
        OnKeyUp.Action = value =>
        {
            ConsoleKey consoleKey = (ConsoleKey)Enum.Parse(typeof(ConsoleKey), value);

            switch (consoleKey)
            {
                case ConsoleKey.LeftArrow:
                    BlazorBricks.Core.GameManager.Instance.Presenter.MoveLeft();
                    break;
                case ConsoleKey.RightArrow:
                    BlazorBricks.Core.GameManager.Instance.Presenter.MoveRight();
                    break;
                case ConsoleKey.UpArrow:
                    BlazorBricks.Core.GameManager.Instance.Presenter.Rotate90();
                    break;
                case ConsoleKey.DownArrow:
                    BlazorBricks.Core.GameManager.Instance.Presenter.MoveDown();
                    break;
                default:
                    break;
            }
            this.StateHasChanged();
        };

        boardViewModel = BlazorBricks.Core.GameManager.Instance.CurrentBoard;

        await Task.Run(async () =>
        {
            while (true)
            {
                await Task.Delay(500);
                BlazorBricks.Core.GameManager.Instance.Presenter.Tick();
                boardViewModel = BlazorBricks.Core.GameManager.Instance.CurrentBoard;
                this.StateHasChanged();
            }
        });

    }
}
