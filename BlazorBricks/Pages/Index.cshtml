@page "/"
<header>
</header>
<main>
    <div class="left">

        <div class="stats">
            <div class="statsLine">
                <div>Score</div>
                <hr />
                <div>@(BlazorBricks.Core.GameManager.Instance.CurrentBoard.Score)</div>
            </div>

            <div class="statsLine">
                <div>HiScore</div>
                <hr />
                <div>@(BlazorBricks.Core.GameManager.Instance.CurrentBoard.HiScore)</div>
            </div>

            <div class="statsLine">
                <div>Lines</div>
                <hr />
                <div>@(BlazorBricks.Core.GameManager.Instance.CurrentBoard.Lines)</div>
            </div>

            <div class="statsLine">
                <div>Level</div>
                <hr />
                <div>@(BlazorBricks.Core.GameManager.Instance.CurrentBoard.Level)</div>
            </div>
        </div>

    </div>
    <div class="middle">

        <div class="board">
            @foreach (var brick in boardViewModel.Bricks)
            {
                <span class="colorChip" style="background-color:@(brick.Color);"></span>
            }
        </div>

    </div>
    <div class="right">
        @{
            var rows = boardViewModel.Next.Max(n => n.Row) + 1;
            var columns = boardViewModel.Next.Max(n => n.Col) + 1;
        }
        <div class="stats">
            <div class="statsLine next-container">
                <div>Next</div>
                <hr />
                <div>
                    <div class="statsLine next-piece piece-rows-@rows piece-columns-@columns">
                        @{
                            foreach (var brick in boardViewModel.Next)
                            {
                                <span class="colorChip" style="background-color:@(brick.Color);"></span>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>
<footer>
    <img class="wa-logo" src="/img/WebAssembly.svg" />
</footer>

<div class="as-console-wrapper"><div class="as-console"></div></div>


<script>

    const assemblyName = 'BlazorBricks';
    const namespace = 'BlazorBricks';
    const typeName = 'OnKeyUp';
    const methodName = 'Handler';

    const onkeyupMethod = Blazor.platform.findMethod(
        assemblyName,
        namespace,
        typeName,
        methodName
    );

    document.onkeyup = function (evt) {
        evt = evt || window.event;
        const keyCode = Blazor.platform.toDotNetString(evt.keyCode.toString());
        Blazor.platform.callMethod(onkeyupMethod, null, [keyCode]);

    };

    function onKeyUp(element, evt) {
        const char = Blazor.platform.toDotNetString(evt.key)
        Blazor.platform.callMethod(onkeyupMethod, null, [char]);
    }
</script>
@functions {
    public BlazorBricks.Core.BoardViewModel boardViewModel;
    protected override async Task OnInitAsync()
    {
        OnKeyUp.Action = async value =>
        {
            ConsoleKey consoleKey = (ConsoleKey)Enum.Parse(typeof(ConsoleKey), value);

            switch (consoleKey)
            {
                case ConsoleKey.LeftArrow:
                    BlazorBricks.Core.GameManager.Instance.Presenter.MoveLeft();
                    break;
                case ConsoleKey.RightArrow:
                    BlazorBricks.Core.GameManager.Instance.Presenter.MoveRight();
                    break;
                case ConsoleKey.UpArrow:
                    BlazorBricks.Core.GameManager.Instance.Presenter.Rotate90();
                    break;
                case ConsoleKey.DownArrow:
                    BlazorBricks.Core.GameManager.Instance.Presenter.MoveDown();
                    break;
                default:
                    break;
            }
            this.StateHasChanged();
        };

        boardViewModel = BlazorBricks.Core.GameManager.Instance.CurrentBoard;

        //await Task.Run(async () =>
        //{
        //    while (true)
        //    {
        //        await Task.Delay(500);
        //        this.StateHasChanged();

        //        //BlazorBricks.Core.GameManager.Instance.Presenter.Tick();
        //    }
        //});

        Object thisLock = new Object();
        BlazorBricks.Core.GameManager.Instance.Presenter.Updated
        += (obj, e) =>
        {
            lock (thisLock)
            {
                boardViewModel = BlazorBricks.Core.GameManager.Instance.CurrentBoard;
                this.StateHasChanged();
            };
        };
    }
}
